Bsplines3 -x*x*x/6
exp1x (exp(x) - 1)/x
exp1x_log (exp(x) - 1)/log(exp(x))
intro_example t/(t+1)
logexp log(exp(x)+1)
NMSEexample31 sqrt(x+1) - sqrt(x)
NMSEexample310 log(1 - x)/log(1+x)
NMSEexample34 (1 - cos(x))/sin(x)
NMSEexample35 atan(x+1) - atan(x)
NMSEexample36 1/(sqrt(x)) - 1/sqrt(1+x)
NMSEexample37 exp(x) - 1
NMSEexample38 (x+1)*log(x+1) - x*log(x) - 1
NMSEexample39 1/x - 1/tan(x)
NMSEproblem331 1/(x+1) - 1/x
NMSEproblem333 1/(1+x) - 2/x + 1/(x - 1)
NMSEproblem334 pow((x+1.0),1.0/3.0) - pow(x,1.0/3.0)
NMSEproblem336 log(x+1) - log(x)
NMSEproblem337 exp(x) + (-2) + exp(-x)
NMSEproblem341 (1 - cos(x))/(x*x)
NMSEproblem343 log((1 - x)/(1 + x))
NMSEproblem344 sqrt((exp(2*x) - 1)/(exp(x) - 1))
NMSEproblem345 (x - sin(x))/(x - tan(x))
NMSEsection311 exp(x)/(exp(x) - 1)
predatorPrey ((4.0 * x) * x) / (1.0 + ((x / 1.11) * (x / 1.11)))
sine x - (1.0/6.0)*x*x*x+(1.0/120.0)*x*x*x*x*x - (1.0/5040.0)*x*x*x*x*x*x*x
sineorder3 (238732414637843.0/250000000000000.0)*x - (6450306886639899.0/50000000000000000.0)*x*x*x
sqroot 1.0 + 0.5*x - 0.125*x*x + 0.0625*x*x*x - 0.0390625*x*x*x*x
sqrt_add 1/(sqrt(x + 1) + sqrt(x))
test05_nonlin1_r4 (x - 1)/(x*x - 1)
test05_nonlin1_test2 1.0/(1+x)
verhulst (4*x)/(1+x/1.11)
ComplexSinCos 1.0/2.0*sin(r)*(exp(-i) - exp(i))
ComplexSquareRoot 1.0/2.0*sqrt(2.0*(sqrt(x1*x1+x2*x2)+x1))
doppler1 ((-(1657.0/5.0+3.0/5.0*T))*v)/(((1657.0/5.0+3.0/5.0*T)+u)*((1657.0/5.0+3.0/5.0*T)+u))
doppler2 ((-(1657.0/5.0+3.0/5.0*T))*v)/(((1657.0/5.0+3.0/5.0*T)+u)*((1657.0/5.0+3.0/5.0*T)+u))
doppler3 ((-(1657.0/5.0+3.0/5.0*T))*v)/(((1657.0/5.0+3.0/5.0*T)+u)*((1657.0/5.0+3.0/5.0*T)+u))
hypot32 sqrt(x1*x1+x2*x2)
i4 sqrtf(x+y*y)
i6 sinf(x*y)
NMSEexample33 sin(x+eps) - sin(x)
NMSEproblem332 tan(x+eps) - tan(x)
NMSEproblem335 cos(x+eps) - cos(x)
NMSEproblem346 pow((x+1),1/n) - pow(x,1/n)
NMSEsection35 exp(a*x) - 1
polarToCarthesianX radius*cos(3.14159265359/180*theta)
polarToCarthesianY radius*sin(3.14159265359/180*theta)
sec4example ((x1*x2) - 1)/((x1*x2)*(x1*x2) - 1)
test03_nonlin2 (x+y)/(x - y)
theta atan(x2/x1)*180/3.14159265359
turbine1 (2.0/(r*r)+3.0) - ((3.0 - 2.0*v)*(1.0/8.0)*((w*w)*r*r))/(1.0 - v) - 9.0/2.0
nonlin1 z/(z+1)
carbonGas 35000000+(401.0/v)*(1000/v)*(v - 0.0427) - 0.0000000000000000041419509
exp1x_32 (exp(x) - 1)/x
carthesianToPolar_radius sqrt(((x * x) + (y * y)))
x_by_xy (x / (x + y))
hypot sqrt(((x1 * x1) + (x2 * x2)))
himmilbeau ((((x1 * x1) + x2) - 11) * (((x1 * x1) + x2) - 11)) + (((x1 + (x2 * x2)) - 7) * ((x1 + (x2 * x2)) - 7))
nonlin2 (((x * y) - 1) / (((x * y) * (x * y)) - 1))
jetEngine (x1 + (((((((((2 * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) / ((x1 * x1) + 1))) * ((((((3 * x1) * x1) + (2 * x2)) - x1) / ((x1 * x1) + 1)) - 3)) + ((x1 * x1) * ((4 * (((((3 * x1) * x1) + (2 * x2)) - x1) / ((x1 * x1) + 1))) - 6))) * ((x1 * x1) + 1)) + (((3 * x1) * x1) * (((((3 * x1) * x1) + (2 * x2)) - x1) / ((x1 * x1) + 1)))) + ((x1 * x1) * x1)) + x1) + (3 * (((((3 * x1) * x1) - (2 * x2)) - x1) / ((x1 * x1) + 1)))))
doppler1 ((-(1657.0/5.0+3.0/5.0*T))*v)/(((1657.0/5.0+3.0/5.0*T)+u)*((1657.0/5.0+3.0/5.0*T)+u))
doppler2 ((-(1657.0/5.0+3.0/5.0*T))*v)/(((1657.0/5.0+3.0/5.0*T)+u)*((1657.0/5.0+3.0/5.0*T)+u))
doppler3 ((-(1657.0/5.0+3.0/5.0*T))*v)/(((1657.0/5.0+3.0/5.0*T)+u)*((1657.0/5.0+3.0/5.0*T)+u))
sinTaylorPoly5 x + -1.0 / 6.0 * x * x * x + 1.0 / 120.0 * x * x * x * x * x
cosTaylorPoly5 1.0 + -0.5 * x * x + 1.0 / 24.0 * x * x * x * x
tanTaylorPoly5 x + 1.0 / 3.0 * x * x * x + 2.0 / 15.0 * x * x * x * x * x
expTaylorPoly5 1.0 + x + 0.5 * x * x + 1.0 / 6.0 * x * x * x + 1.0 / 24.0 * x * x * x * x + 1.0 / 120.0 * x * x * x * x * x
logTaylorPoly5 x - 0.5 * x * x + 1.0 / 3.0 * x * x * x - 0.25 * x * x * x * x + 1.0 / 5.0 * x * x * x * x * x
asinTaylorPoly5 x + 1.0 / 6.0 * x * x * x + 3.0 / 40.0 * x * x * x * x * x 
acosTaylorPoly5 1.57079632679489661923132169163975144209858469968754 - 1.0 * x - 1.0 / 6.0 * x * x * x - 3.0 / 40.0 * x * x * x * x * x
atanTaylorPoly5 x - 1.0 / 3.0 * x * x * x + 1.0/ 5.0 * x * x * x * x * x
sinTaylorPoly7 x - 1.0 / 6.0 * x * x * x + 1.0/ 120.0 * x * x * x * x * x - 1.0 / 5040.0 * x * x * x * x * x * x * x
cosTaylorPoly7 1.0 - 0.5 * x * x + 1.0 / 24.0 * x * x * x * x - 1.0 / 720.0 * x * x * x * x * x * x
tanTaylorPoly7 x + 1.0 / 3.0 * x * x * x + 2.0 / 15.0 * x * x * x * x * x + 17.0 / 315.0 * x * x * x * x * x * x * x
expTaylorPoly7 1.0 + x + 0.5 * x * x + 1.0 / 6.0 * x * x * x + 1.0 / 24.0 * x * x * x * x + 1.0 / 120.0 * x * x * x * x * x + 1.0 / 720.0 * x * x * x * x * x * x + 1.0 / 5040.0 * x * x * x * x * x * x * x
logTaylorPoly7 x - 0.5 * x * x + 1.0 / 3.0 * x * x * x - 0.25 * x * x * x * x + 1.0 / 5.0 * x * x * x * x * x - 1.0 / 6.0 * x * x * x * x * x * x + 1.0 / 7.0 * x * x * x * x * x * x * x
asinTaylorPoly7 x + 1.0 / 6.0 * x * x * x + 3.0 / 40.0 * x * x * x * x * x + 5.0 / 112.0 * x * x * x * x * x * x * x
acosTaylorPoly7 1.57079632679489661923132169163975144209858469968754 - 1.0 * x - 1.0 / 6.0 * x * x * x - 3.0 / 40.0 * x * x * x * x * x - 5.0 / 112.0 * x * x * x * x * x * x * x
atanTaylorPoly7 x - 1.0 / 3.0 * x * x * x + 1.0 / 5.0 * x * x * x * x * x - 1.0 / 7.0 * x * x * x * x * x * x * x
exp2TaylorPoly7 1 + 0.69314718056 * x + 0.24022650695913864 * x * x + 0.05550410866483472 * x * x * x + 0.009618129107631514 * x * x * x * x + 0.0013333558146433706 * x * x * x * x * x + 0.00015403530393388905 * x * x * x * x * x * x + 1.5252733804068269e-05 * x * x * x * x * x * x * x
exp10TaylorPoly7 1 + 2.30258509299 * x + 2.650949055229883 * x * x + 2.034678592282751 * x * x * x + 1.171255148904035 * x * x * x * x + 0.5393829291908427 * x * x * x * x * x + 0.20699584869468582 * x * x * x * x * x * x + 0.06808936507359958 * x * x * x * x * x * x * x
log2TaylorPoly7 1.442695040888963407359924681001892137426645954153 * x - 0.7213475204444817036799623405009460687133229770765 * x * x + 0.48089834696298780245330822700063071247554865138433 * x * x * x - 0.36067376022224085183998117025047303435666148853825 * x * x * x * x + 0.28853900817779268147198493620037842748532919083059 * x * x * x * x * x - 0.240449173481493901226654113500315356237774325692165 * x * x * x * x * x * x + 0.20609929155556620105141781157169887677523513630757 * x * x * x * x * x * x * x
log10TaylorPoly7 0.43429448190325176805322606204634 * x - 0.21714724095162588 * x * x + 0.14476482730108395 * x * x * x - 0.10857362047581294 * x * x * x * x + 0.08685889638065035 * x * x * x * x * x + x * 0.06204206884332169 * x * x * x * x * x * x - 0.07238241365054196 * x * x * x * x * x * x
sinhTaylorPoly7 x + 1.0 / 6.0 * x * x * x + 1.0 / 120.0 * x * x * x * x * x + 1.0 / 5040.0 * x * x * x * x * x * x * x
coshTaylorPoly7 1 + 0.5 * x * x  + 1.0 / 24.0 * x * x * x * x + 1.0 / 720.0 * x * x * x * x * x * x
tanhTaylorPoly7 x + -1.0 / 3.0 * x * x * x + 2.0 / 15.0 * x * x * x * x * x + -17.0 / 315.0 * x * x * x * x * x * x * x
asinhTaylorPoly7 x + -1.0 / 6.0 * x * x * x + 3.0 / 40.0 * x * x * x * x * x + -5.0 / 112.0 * x * x * x * x * x * x * x
acoshTaylorPoly7 -10.93051753399604 + 29.957916712389473 * x + -35.58080559049901 * x * x +25.219476933674876 * x * x * x + -11.066799860894648 * x * x * x * x + 2.970361895278266 * x * x * x * x * x + -0.44893622077214135 * x * x * x * x * x * x + 0.029376877759354054 * x * x * x * x * x * x * x
atanhTaylorPoly7 x + 1.0 / 3.0 * (x * x) * x + 1.0 / 5.0 * (x * x) * x * x * x + 1.0 / 7.0 * (x * x) * x * x * x * x * x
squareRoot3_1 1 + 0.5 * x
squareRoot3_2 sqrt(1 + x)
squareRoot3Invalid_1 1 + 0.5 * x
squareRoot3Invalid_2 sqrt(1 + x)
cav10_1 x / 10.0
cav10_2 x * x + 2
gustafsonExample_1 1
gustafsonExample_2 (exp(((fabs((x - sqrt(((x * x) + 1.0)))) - (1.0 / (x + sqrt(((x * x) + 1.0))))) * (fabs((x - sqrt(((x * x) + 1.0)))) - (1.0 / (x + sqrt(((x * x) + 1.0))))))) - 1.0) / x
smartRoot_1 (c * 2.0) / (-3.5 - sqrt(((3.5 * 3.5) - ((3.0 * c) * 4.0))))
smartRoot_2 (-3.5 + sqrt(((3.5 * 3.5) - ((3.0 * c) * 4.0)))) / (3.0 * 2.0)
triangleSorted_1 sqrt(((((c + (b + a)) * (a - (c - b))) * (a + (c - b))) * (c + (b - a)))) / 4.0
triangleSorted_2 sqrt(((((c + (a + b)) * (b - (c - a))) * (b + (c - a))) * (c + (a - b)))) / 4.0;
example x0+x1+x2+x3